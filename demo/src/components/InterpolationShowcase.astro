---
// InterpolationShowcase.astro
export interface Props {
  userName: string;
  userLevel: number;
  status: string;
}

const { userName, userLevel, status } = Astro.props;
---

<div class="card bg-base-200 shadow-md p-6 mb-4">
  <h4 class="text-lg font-semibold mb-4">User Profile</h4>
  
  <!-- Showcase ${attr:name} helper -->
  <div class="mb-4">
    <label class="block text-sm font-medium mb-2">Username:</label>
    <input
      type="text"
      class="input input-bordered w-full"
      value={userName}
      name="username"
      data-field="username"
      data-validation-min="3"
      title={`Current username: ${userName}`}
      hx-patch="/api/profile"
      hx-trigger="blur changed"
      hx-target="next .feedback"
      hx-ext="optimistic"
      data-optimistic={JSON.stringify({
        values: {
          "data-status": "validating",
          "title": "Validating username: ${attr:value}"
        },
        errorMessage: "Username validation failed",
        delay: 2000
      })}
    />
    <div class="feedback text-sm mt-1 text-info"></div>
  </div>

  <!-- Showcase ${data:name} helper -->
  <div class="mb-4">
    <label class="block text-sm font-medium mb-2">User Level:</label>
    <select
      class="select select-bordered w-full"
      name="level"
      data-field="level"
      data-current-level={userLevel}
      data-user-name={userName}
      hx-patch="/api/profile"
      hx-trigger="change"
      hx-target="next .feedback"
      hx-ext="optimistic"
      data-optimistic={JSON.stringify({
        values: {
          "data-status": "updating",
          "title": "Updating ${data:user-name} to level ${this.value}"
        },
        errorTemplate: "Failed to update ${data:user-name} from level ${data:current-level}",
        delay: 2000
      })}
    >
      <option value="1" selected={userLevel === 1}>Beginner</option>
      <option value="2" selected={userLevel === 2}>Intermediate</option>
      <option value="3" selected={userLevel === 3}>Advanced</option>
      <option value="4" selected={userLevel === 4}>Expert</option>
    </select>
    <div class="feedback text-sm mt-1 text-info"></div>
  </div>

  <!-- Showcase ${this.textContent} helper -->
  <div class="mb-4">
    <label class="block text-sm font-medium mb-2">Status Message:</label>
    <div
      class="p-3 border rounded cursor-pointer bg-base-100 hover:bg-base-200"
      data-field="status"
      data-original-status={status}
      onclick="this.style.display='none'; this.nextElementSibling.style.display='block'; this.nextElementSibling.focus();"
      hx-patch="/api/profile"
      hx-trigger="blur from:next input, keyup[key=='Enter'] from:next input"
      hx-target="this"
      hx-swap="outerHTML"
      hx-ext="optimistic"
      data-optimistic={JSON.stringify({
        values: {
          "textContent": "Saving: ${this.textContent}",
          "className": "p-3 border rounded bg-yellow-100 text-yellow-800"
        },
        errorTemplate: 'Could not save "${this.textContent}"',
        delay: 2000
      })}
    >
      {status}
    </div>
    <input
      type="text"
      name="status"
      value={status}
      class="input input-bordered w-full"
      style="display: none"
      onblur="this.style.display='none'; this.previousElementSibling.style.display='block';"
    />
    <div class="text-xs text-gray-500 mt-1">Click to edit</div>
  </div>

  <!-- Hidden inputs for form data -->
  <input type="hidden" name="userName" value={userName} />
  <input type="hidden" name="userLevel" value={userLevel.toString()} />
  <input type="hidden" name="status" value={status} />
</div>
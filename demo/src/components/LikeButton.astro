---
// LikeButton.astro
export interface Props {
  liked: boolean;
  count: number;
}

const { liked, count } = Astro.props;

// Create optimistic config - calculate the toggled state
const toggledLiked = !liked;
const toggledCount = toggledLiked ? count + 1 : count - 1;
const toggledText = toggledLiked
  ? `‚ù§Ô∏è Liked! (${toggledCount})`
  : `ü§ç Like (${toggledCount})`;
const toggledClass = toggledLiked ? "btn btn-error" : "btn btn-outline";

const optimisticConfig = {
  snapshot: ["textContent", "className", "data-liked", "data-count"],
  values: {
    textContent: toggledText,
    className: `${toggledClass} hx-optimistic`, // Keep the hx-optimistic class
    "data-liked": toggledLiked.toString(),
    "data-count": toggledCount.toString(),
  },
  errorMessage: "Could not update like",
  delay: 2000,
};
---

<form style="display: inline;">
  <button
    class={`btn ${liked ? "btn-error" : "btn-outline"}`}
    data-liked={liked}
    data-count={count}
    hx-post="/api/like"
    hx-target="this"
    hx-swap="outerHTML"
    data-optimistic={JSON.stringify(optimisticConfig)}
  >
    {liked ? "‚ù§Ô∏è" : "ü§ç"}
    {liked ? "Liked!" : "Like"} ({count})
  </button>
  <input
    type="hidden"
    name="liked"
    value={liked.toString()}
  />
  <input
    type="hidden"
    name="count"
    value={count.toString()}
  />
</form>

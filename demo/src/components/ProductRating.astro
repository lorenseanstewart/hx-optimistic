---
// ProductRating.astro - demonstrates interpolation helpers in realistic context
export interface Props {
  productId: string;
  productName: string;
  currentRating: number;
  reviewCount: number;
}

const { productId, productName, currentRating, reviewCount } = Astro.props;

const optimisticConfig = {
  template: "#rating-optimistic-template",
  errorTemplate: "#rating-error-template",
  delay: 2000,
};
---

<!-- Template for optimistic rating update -->
<template id="rating-optimistic-template">
  <div class="rating-feedback hx-optimistic p-4 bg-green-50 border border-green-200 rounded-lg">
    <div class="flex items-center gap-3">
      <div class="flex items-center">
        <svg class="w-5 h-5 text-green-500" fill="currentColor" viewBox="0 0 20 20">
          <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
        </svg>
        <span class="ml-1 text-green-700 font-medium">{'${this.textContent}'} stars</span>
      </div>
      <span class="text-green-600">•</span>
      <span class="text-green-700">Thanks for rating <strong>{'${attr:title}'}</strong>!</span>
      <span class="text-green-600">•</span>
      <span class="text-xs text-green-600">Product #{'${data:product-id}'} • Rating: {'${data:rating}'}/5</span>
    </div>
    <p class="mt-2 text-sm text-green-600">Your rating is being saved...</p>
  </div>
</template>

<!-- Template for error state -->
<template id="rating-error-template">
  <div class="alert alert-error mt-3">
    <svg class="stroke-current shrink-0 h-6 w-6" fill="none" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
    </svg>
    <span>Failed to save your rating for {'${attr:title}'}. Please try again.</span>
  </div>
</template>

<div class="product-rating-demo space-y-4">
  <!-- Product Info -->
  <div class="flex items-center gap-4 p-4 bg-base-200 rounded-lg">
    <div class="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center">
      <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19V6l12-3v13M9 19c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zm12-3c0 1.105-1.343 2-3 2s-3-.895-3-2 1.343-2 3-2 3 .895 3 2zM9 10l12-3"/>
      </svg>
    </div>
    <div>
      <h4 class="font-semibold text-lg">{productName}</h4>
      <div class="flex items-center gap-2 text-sm text-base-content/70">
        <div class="flex items-center">
          {Array.from({ length: 5 }, (_, i) => (
            <svg 
              class={`w-4 h-4 ${i < Math.floor(currentRating) ? 'text-yellow-400' : 'text-gray-300'}`} 
              fill="currentColor" 
              viewBox="0 0 20 20"
            >
              <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
            </svg>
          ))}
          <span class="ml-2">{currentRating} ({reviewCount} reviews)</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Rating Buttons -->
  <div class="rating-section" id={`rating-${productId}`}>
    <h5 class="font-medium mb-3">Rate this product:</h5>
    <div 
      class="flex gap-2"
      data-product-id={productId}
    >
      {[1, 2, 3, 4, 5].map((rating) => (
        <button
          class="btn btn-outline btn-sm hover:btn-warning transition-all"
          title={productName}
          data-product-id={productId}
          data-rating={rating}
          hx-post="/api/rating"
          hx-target={`#rating-${productId} .rating-result`}
          hx-swap="innerHTML"
          hx-ext="optimistic"
          hx-vals={JSON.stringify({ rating, productId })}
          data-optimistic={JSON.stringify(optimisticConfig)}
        >
          {rating}⭐
        </button>
      ))}
    </div>
    <div class="rating-result mt-4">
      <!-- Optimistic/error content will appear here -->
    </div>
  </div>
</div>

<style>
  .product-rating-demo {
    max-width: 100%;
  }
  
  .rating-feedback {
    animation: slideIn 0.3s ease-out;
  }
  
  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .btn:hover {
    transform: translateY(-2px);
  }
</style>
---
// index.astro
import LikeButton from "../components/LikeButton.astro";
import StatusToggle from "../components/StatusToggle.astro";
import CommentSystem from "../components/CommentSystem.astro";
import InlineEditor from "../components/InlineEditor.astro";
import ProductRating from "../components/ProductRating.astro";
import WarningsDemo from "../components/WarningsDemo.astro";
import Code from "../components/Code.astro";
---

<html
  lang="en"
  data-theme="pastel"
>
  <head>
    <meta charset="utf-8" />
    <link
      rel="icon"
      type="image/svg+xml"
      href="/favicon.svg"
    />
    <meta
      name="viewport"
      content="width=device-width"
    />
    <title>hx-optimistic Demo & Docs</title>
    <script
      src="/htmx.min.js"
      onload="console.log('HTMX loaded')"
      onerror="console.error('HTMX failed to load')"
    ></script>
    <script
      src="/hx-optimistic.js"
      is:inline
    ></script>
    <script is:inline>
      // Inject CSS directly via JavaScript to bypass any loading issues
      const style = document.createElement('style');
      style.textContent = `
        /* Clean optimistic update styles */
        .hx-optimistic,
        button.btn.hx-optimistic,
        button.btn.btn-error.hx-optimistic,
        button.btn.btn-outline.hx-optimistic {
          background-color: #bfdbfe !important;
          background-image: none !important;
          box-shadow: 0 0 0 2px #3b82f6 !important;
          border-color: #3b82f6 !important;
          color: #1e40af !important;
          transition: all 0.2s ease-in-out !important;
        }
        
        /* Error state styling */
        .hx-optimistic-error {
          background-color: #fee2e2 !important;
          color: #dc2626 !important;
          box-shadow: 0 0 0 2px #ef4444 !important;
          border-color: #ef4444 !important;
        }
        
        /* Revert animation */
        .hx-optimistic-reverting {
          animation: fadeBack 0.3s ease-out !important;
        }
        
        @keyframes fadeBack {
          from { opacity: 0.5; transform: scale(0.98); }
          to { opacity: 1; transform: scale(1); }
        }
      `;
      document.head.appendChild(style);
    </script>
    <link
      rel="stylesheet"
      href="/src/styles/tailwind.css"
    />
    <style>
      /* Optimistic update styles - more noticeable and loaded in head */
      .hx-optimistic {
        opacity: 0.8 !important;
        background-color: #bfdbfe !important;  /* More noticeable blue */
        box-shadow: 0 0 0 2px #3b82f6 !important;  /* Blue outline */
        transition: all 0.2s ease-in-out !important;
      }

      /* Applied when request fails */
      .hx-optimistic-error {
        background-color: #fee2e2 !important;
        color: #dc2626 !important;
        box-shadow: 0 0 0 2px #ef4444 !important;  /* Red outline */
      }

      /* Applied during revert animation */
      .hx-optimistic-reverting {
        animation: fadeBack 0.3s ease-out !important;
      }

      /* Error messages appended to elements */
      .hx-optimistic-error-message {
        padding: 0.5rem !important;
        margin-top: 0.25rem !important;
        border-radius: 0.25rem !important;
        background: #fee2e2 !important;
        color: #dc2626 !important;
        font-size: 0.875rem !important;
      }

      /* Add fade animation */
      @keyframes fadeBack {
        from {
          opacity: 0.5;
          transform: scale(0.98);
        }
        to {
          opacity: 1;
          transform: scale(1);
        }
      }

      /* Make optimistic-pending class also noticeable */
      .optimistic-pending {
        opacity: 0.8 !important;
        background-color: #bfdbfe !important;
        box-shadow: 0 0 0 2px #3b82f6 !important;
      }
      
      /* MAXIMUM SPECIFICITY - Override DaisyUI/Tailwind button styles */
      html body button.btn.btn-error.hx-optimistic,
      html body button.btn.btn-outline.hx-optimistic,
      html body button.btn.hx-optimistic,
      html body .btn.btn-error.hx-optimistic,
      html body .btn.btn-outline.hx-optimistic,
      html body .btn.hx-optimistic,
      html body button.btn.optimistic-pending,
      html body .btn.optimistic-pending,
      html body button.btn.debug-optimistic,
      html body .btn.debug-optimistic {
        background-color: #bfdbfe !important;
        background-image: none !important;
        background: #bfdbfe !important;
        box-shadow: 0 0 0 2px #3b82f6 !important;
        border-color: #3b82f6 !important;
        border: 2px solid #3b82f6 !important;
        color: #1e40af !important;
      }
      
      /* Nuclear option - inline style level specificity */
      button[class*="hx-optimistic"],
      button[class*="debug-optimistic"] {
        background-color: #bfdbfe !important;
        background-image: none !important;
        background: #bfdbfe !important;
        box-shadow: 0 0 0 2px #3b82f6 !important;
        border: 2px solid #3b82f6 !important;
      }
      
      /* Debug - add a very obvious style to test if CSS is loading */
      .debug-test {
        border: 5px solid red !important;
        background: yellow !important;
      }
      
      /* Debug optimistic state - should be very obvious */
      .debug-optimistic {
        border: 10px solid lime !important;
        background: magenta !important;
        color: white !important;
        outline: 5px solid cyan !important;
        outline-offset: 3px !important;
      }
      
      /* Alternative approach - use CSS custom properties */
      .hx-optimistic {
        --tw-bg-opacity: 1 !important;
        background-color: rgb(191 219 254 / var(--tw-bg-opacity)) !important;
      }
    </style>
  </head>
  <body
    hx-ext="optimistic"
    class="min-h-screen bg-base-100"
  >
    <div class="container mx-auto max-w-4xl px-4 py-8 space-y-10 leading-loose">
      <h1 class="text-4xl font-bold text-center mb-6 text-primary">
        hx-optimistic Demo
      </h1>

      <p class="text-lg text-center mb-8 text-base-content/80">
        Comprehensive demonstration of optimistic updates with HTMX, featuring
        interpolation helpers, developer warnings, and enhanced error handling.
      </p>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <div class="flex items-center gap-3">
            <h3 class="card-title text-2xl text-primary">Documentation</h3>
            <span class="badge badge-warning badge-outline">V1</span>
          </div>
          <p class="text-base-content/80">
            Quick start and key patterns for the <strong class="text-secondary"
              >optimistic</strong
            > HTMX extension. The demos below showcase each pattern.
          </p>
          <div class="grid grid-cols-1 gap-4">
            <Code
              title="Enable the extension"
              lang="html"
              code={`<script src="/hx-optimistic.js"></script>\n<body hx-ext="optimistic">...</body>`}
            />
            <Code
              title="Values pattern"
              lang="html"
              code={`<button\n  hx-post="/api/like"\n  hx-target="this"\n  hx-swap="outerHTML"\n  data-optimistic='{"snapshot":["textContent"],"values":{"textContent":"Saving..."},"delay":2000}'>\n  Like\n</button>`}
            />
            <Code
              title="Template pattern"
              lang="html"
              code={`<button\n  hx-post="/api/counter"\n  hx-target="closest .counter"\n  hx-swap="outerHTML"\n  data-optimistic='{"template":"<div class=\'counter hx-optimistic\'>...</div>","errorMessage":"Failed"}'>\n  +\n</button>`}
            />
            <Code
              title="Error handling"
              lang="json"
              code={`{"errorMessage":"Could not save","delay":2000}`}
            />
          </div>
          <p class="text-sm text-base-content/70">
            <a
              class="link link-secondary"
              href="https://github.com/lorenseanstewart/hx-optimistic"
              target="_blank"
              rel="noopener"
              >GitHub repository</a
            >
          </p>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <h3 class="card-title text-2xl text-primary">
            Like Button with Toggle
          </h3>
          <p class="text-base-content/80">
            Click to like/unlike. The count increments when liked, decrements
            when unliked.
            <strong class="text-secondary"
              >20% chance of simulated errors</strong
            > to demonstrate error handling.
          </p>
          <div class="alert alert-info">
            <div class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
              <div>
                <strong>Look for the optimistic styling:</strong> When clicked, the button briefly shows a 
                <strong class="text-blue-600">blue background with blue outline</strong> 
                while the request is processed. On errors, you'll see a 
                <strong class="text-red-600">red background with red outline</strong> 
                before reverting.
              </div>
            </div>
          </div>
          <div class="features">
            <strong class="text-secondary">Features demonstrated:</strong>
            <ul>
              <li>Pre-calculated optimistic values</li>
              <li>
                Multiple attribute snapshots (textContent, className, data-*)
              </li>
              <li>Toggle logic with conditional states</li>
              <li>Error handling with automatic revert</li>
            </ul>
          </div>

          <div class="divider"></div>

          <div id="like-button">
            <LikeButton
              liked={false}
              count={42}
            />
          </div>

          <div class="divider"></div>

          <div class="code-explanation space-y-3">
            <h4 class="text-xl font-semibold text-base-content">
              How This Works
            </h4>

            <Code
              title="1. LikeButton Component Configuration"
              lang="typescript"
              code={`// Pre-calculate the optimistic state
const toggledLiked = !liked;
const toggledCount = toggledLiked ? count + 1 : count - 1;
const toggledText = toggledLiked ? \`❤️ Liked! (\${toggledCount})\` : \`🤍 Like (\${toggledCount})\`;

const optimisticConfig = {
  snapshot: ["textContent", "className", "data-liked", "data-count"],
  values: {
    textContent: toggledText,
    className: toggledClass,
    "data-liked": toggledLiked.toString(),
    "data-count": toggledCount.toString()
  },
  errorMessage: "Could not update like",
  delay: 2000
};`}
            />

            <Code
              title="2. Button HTML"
              lang="astro"
              code={`<button 
  class={\`btn \${liked ? 'liked' : ''}\`}
  data-liked={liked}
  data-count={count}
  hx-post="/api/like"
  hx-target="this"
  hx-swap="outerHTML"
  data-optimistic={JSON.stringify(optimisticConfig)}>
  {liked ? '❤️' : '🤍'} {liked ? 'Liked!' : 'Like'} ({count})
</button>`}
            />

            <h5>What Happens on Click</h5>
            <ol>
              <li>
                <strong class="text-secondary"
                  >Extension snapshots original state:</strong
                > Saves current textContent, className, data-liked, data-count
              </li>
              <li>
                <strong class="text-secondary"
                  >Applies optimistic values immediately:</strong
                > Button shows toggled state before server responds
              </li>
              <li>
                <strong class="text-secondary">HTMX sends request:</strong> Form
                data includes current liked/count state
              </li>
              <li>
                <strong class="text-secondary">Server processes:</strong> Toggles
                state and returns new LikeButton component
              </li>
              <li>
                <strong class="text-secondary">On success:</strong> Server response
                replaces optimistic state
              </li>
              <li>
                <strong class="text-secondary">On error:</strong> Shows error message,
                then reverts to original state after 2s
              </li>
            </ol>
          </div>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <h3 class="card-title text-2xl text-primary">
            Status Toggle with Rich Templates
          </h3>
          <p class="text-base-content/80">
            Click to cycle through user status (Online → Away → Offline → Online). 
            <strong class="text-secondary"
              >20% chance of simulated errors</strong
            > to demonstrate error handling.
          </p>
          <div class="alert alert-info">
            <div class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
              <div>
                <strong>Look for the optimistic update:</strong> When clicked, the entire card immediately shows the 
                <strong class="text-blue-600">next status with blue border</strong> (e.g., Online → Away instantly). 
                On errors, you'll see a <strong class="text-red-600">red-bordered template</strong> with error message before reverting.
              </div>
            </div>
          </div>
          <div class="features">
            <strong class="text-secondary">Features demonstrated:</strong>
            <ul>
              <li>Complete HTML template replacement (template property)</li>
              <li>True optimistic updates - shows predicted next state immediately</li>
              <li>Separate error templates with different styling (errorTemplate)</li>
              <li>Full content snapshotting (snapshotContent: true)</li>
              <li>Template interpolation with component data</li>
            </ul>
          </div>

          <div class="divider"></div>

          <StatusToggle status="online" username="Alex" />

          <div class="divider"></div>

          <div class="code-explanation space-y-3">
            <h4 class="text-xl font-semibold text-base-content">
              How This Works
            </h4>

            <Code
              title="StatusToggle Component with Template Variables"
              lang="astro"
              code={`// Template variables for better organization and reusability
const optimisticTemplate = \`
  <div class="status-card hx-optimistic card bg-base-100 shadow-md border-2 border-blue-400">
    <div class="card-body p-4">
      <div class="flex items-center gap-3">
        <div class="avatar placeholder">
          <div class="bg-neutral text-neutral-content rounded-full w-12">
            <span class="text-xl">\${username.charAt(0).toUpperCase()}</span>
          </div>
        </div>
        <div class="flex-1">
          <h3 class="font-semibold">\${username}</h3>
          <div class="flex items-center gap-2">
            <span class="text-lg">\${nextConfig.icon}</span>
            <span class="badge badge-\${nextConfig.color}">\${nextConfig.text}</span>
          </div>
        </div>
        <button class="btn btn-outline btn-sm">Change Status</button>
      </div>
    </div>
  </div>
\`;

const errorTemplate = \`
  <div class="status-card card bg-base-100 shadow-md border-2 border-red-400">
    <div class="card-body p-4">
      <div class="flex items-center gap-2">
        <span class="text-lg">❌</span>
        <span class="badge badge-error">Failed to update status</span>
      </div>
    </div>
  </div>
\`;

const optimisticConfig = {
  snapshotContent: true,
  template: optimisticTemplate,
  errorTemplate: errorTemplate,
  delay: 2500,
};`}
            />

            <Code
              title="Using the Configuration in HTML"
              lang="astro"
              code={`<button
  class="btn btn-outline btn-sm"
  hx-post="/api/status"
  hx-target="closest .status-card"
  hx-swap="outerHTML"
  hx-vals={JSON.stringify({ 
    username: username,
    currentStatus: status, 
    newStatus: nextStatus 
  })}
  hx-ext="optimistic"
  data-optimistic={JSON.stringify(optimisticConfig)}
>
  Change Status
</button>`}
            />

            <h5>Essential HTML Attributes</h5>
            <ul>
              <li>
                <strong class="text-secondary">hx-ext="optimistic":</strong> 
                Enables the optimistic extension for this element
              </li>
              <li>
                <strong class="text-secondary">data-optimistic:</strong> 
                JSON.stringify() the optimisticConfig to pass it to the extension
              </li>
              <li>
                <strong class="text-secondary">hx-target:</strong> 
                Specifies which element to replace (both optimistically and on server response)
              </li>
              <li>
                <strong class="text-secondary">hx-swap="outerHTML":</strong> 
                Replace the entire target element (required for template-based updates)
              </li>
            </ul>

            <h5>Key Template Features</h5>
            <ul>
              <li>
                <strong class="text-secondary">Template variables:</strong> 
                Store templates in separate variables for better organization and reusability
              </li>
              <li>
                <strong class="text-secondary">Complete HTML replacement:</strong> 
                The entire component is replaced with the optimistic template
              </li>
              <li>
                <strong class="text-secondary">Visual feedback:</strong> 
                Blue border clearly indicates optimistic state while showing the predicted status
              </li>
              <li>
                <strong class="text-secondary">Separate error templates:</strong> 
                Different errorTemplate variable with red styling for failed requests
              </li>
              <li>
                <strong class="text-secondary">Template interpolation:</strong> 
                Uses variables like {'${username}'} and {'${nextConfig.icon}'} in templates
              </li>
              <li>
                <strong class="text-secondary">Clean configuration:</strong> 
                optimisticConfig references template variables instead of inline strings
              </li>
            </ul>

            <h5>Why Templates vs Values?</h5>
            <p>Templates are ideal when you need:</p>
            <ul>
              <li><strong class="text-secondary">Rich UI changes:</strong> Loading spinners, icons, complex layouts</li>
              <li><strong class="text-secondary">Multiple elements:</strong> Updating several parts of the UI simultaneously</li>
              <li><strong class="text-secondary">Conditional content:</strong> Different UI based on state (loading vs error vs success)</li>
              <li><strong class="text-secondary">Brand consistency:</strong> Maintaining design system patterns during transitions</li>
            </ul>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <h3 class="card-title text-2xl text-primary">
            Comment System with Input Interpolation
          </h3>
          <p class="text-base-content/80">
            Post a comment and see it appear immediately with optimistic updates.
            <strong class="text-secondary">25% chance of simulated errors</strong> 
            to demonstrate append-mode error handling.
          </p>
          <div class="alert alert-info">
            <div class="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-info shrink-0 w-6 h-6"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
              <div>
                <strong>Look for input interpolation:</strong> Your comment text appears immediately as you typed it using 
                <strong class="text-blue-600">${'${this.value}'} interpolation</strong>. 
                Validation errors <strong class="text-orange-600">append below the form</strong> instead of replacing content.
              </div>
            </div>
          </div>
          <div class="features">
            <strong class="text-secondary">Features demonstrated:</strong>
            <ul>
              <li>User input interpolation with {'${this.value}'}</li>
              <li>Append error mode (errorMode: "append")</li>
              <li>Rich optimistic templates with avatars and styling</li>
              <li>Real-time preview of user-typed content</li>
              <li>Form validation with contextual error messages</li>
            </ul>
          </div>

          <div class="divider"></div>

          <CommentSystem comments={[
            {
              id: "1",
              author: "Alice",
              text: "This is really helpful, thanks for sharing!",
              timestamp: "2:30 PM"
            },
            {
              id: "2", 
              author: "Bob",
              text: "I had the same question. Great explanation!",
              timestamp: "2:45 PM"
            }
          ]} />

          <div class="divider"></div>

          <div class="code-explanation space-y-3">
            <h4 class="text-xl font-semibold text-base-content">
              How This Works
            </h4>

            <Code
              title="1. HTML Template Elements"
              lang="html"
              code={`<!-- Template elements for optimistic updates -->
<template id="comment-optimistic-template">
  <div class="comment hx-optimistic border-l-4 border-blue-400 bg-blue-50 p-4 mb-4">
    <div class="flex items-start gap-3">
      <div class="avatar placeholder">
        <div class="bg-blue-500 text-white rounded-full w-10 h-10 flex items-center justify-center">
          <span class="text-sm font-bold">U</span>
        </div>
      </div>
      <div class="flex-1">
        <div class="flex items-center gap-2 mb-1">
          <span class="font-semibold text-blue-700">You</span>
          <span class="text-xs text-blue-600">posting...</span>
        </div>
        <p class="text-gray-800">\${textarea}</p>
      </div>
    </div>
  </div>
</template>

<template id="comment-error-template">
  <div class="alert alert-error mt-2">
    <span class="text-sm">❌ \${error}</span>
  </div>
</template>`}
            />

            <Code
              title="2. Configuration Using Template References"
              lang="javascript"
              code={`const optimisticConfig = {
  template: "#comment-optimistic-template",    // Reference to <template> element
  errorTemplate: "#comment-error-template",   // Reference to <template> element
  errorMode: "append",   // Append error messages instead of replacing content
  delay: 3000,
  target: ".comments-list",  // Target comments list for optimistic updates
  swap: "beforeend",        // Append to end of list
};`}
            />

            <Code
              title="3. Form HTML with Textarea Target"
              lang="astro"
              code={`<form 
  class="comment-input-wrapper"
  hx-post="/api/comments"
  hx-target="closest .comment-system"
  hx-swap="outerHTML"
  hx-ext="optimistic"
  data-optimistic={JSON.stringify(optimisticConfig)}
>
  <textarea
    name="comment"
    class="w-full p-3 border border-gray-300 rounded-lg"
    rows="3"
    placeholder="Share your thoughts..."
    required
  ></textarea>
  <button type="submit" class="btn btn-primary">Post Comment</button>
</form>`}
            />

            <h5>Key Features with &lt;template&gt; Elements</h5>
            <ul>
              <li>
                <strong class="text-secondary">HTML &lt;template&gt; elements:</strong> 
                Store templates in the DOM using standard HTML template tags
              </li>
              <li>
                <strong class="text-secondary">Template references:</strong> 
                Use CSS selectors like "#template-id" to reference templates
              </li>
              <li>
                <strong class="text-secondary">${'${textarea}'} interpolation:</strong> 
                Semantic field access - automatically finds textarea elements in forms
              </li>
              <li>
                <strong class="text-secondary">Append error mode:</strong> 
                Validation errors appear below the form without replacing content
              </li>
              <li>
                <strong class="text-secondary">Clean separation:</strong> 
                Templates are separate from JavaScript configuration
              </li>
            </ul>

            <h5>&lt;template&gt; vs Template Variables</h5>
            <p>Choose your approach based on needs:</p>
            <ul>
              <li><strong class="text-secondary">&lt;template&gt; elements:</strong> Better for complex HTML, IDE syntax highlighting, and separation of concerns</li>
              <li><strong class="text-secondary">Template variables:</strong> Better for dynamic templates, computed values, and inline simplicity (see StatusToggle example)</li>
              <li><strong class="text-secondary">Both support:</strong> Full interpolation, error handling, and all optimistic update features</li>
            </ul>

            <h5>Semantic Field Interpolation</h5>
            <p>The extension now supports semantic field access for forms:</p>
            <ul>
              <li><strong class="text-secondary">${'${textarea}'}:</strong> First textarea element in the form</li>
              <li><strong class="text-secondary">${'${email}'}:</strong> First input[type="email"] element</li>
              <li><strong class="text-secondary">${'${text}'}:</strong> First input[type="text"] or input without type</li>
              <li><strong class="text-secondary">${'${password}'}:</strong> First input[type="password"] element</li>
              <li><strong class="text-secondary">${'${this.value}'}:</strong> Fallback - first input with content</li>
              <li><strong class="text-secondary">${'${fieldName}'}:</strong> Element with name="fieldName" attribute</li>
            </ul>
          </div>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <h3 class="card-title text-2xl text-primary">
            Inline Editing with Validation
          </h3>
          <p class="text-base-content/80">
            Click the text below to edit it in place. Changes are saved on blur
            or when you press Enter.
            <strong class="text-secondary"
              >20% chance of simulated errors</strong
            > to demonstrate error handling.
          </p>
          <div class="features">
            <strong class="text-secondary">Features demonstrated:</strong>
            <ul>
              <li>
                Multiple triggers (blur and Enter key: hx-trigger="blur
                from:input, keyup[key=='Enter'] from:input")
              </li>
              <li>PATCH HTTP method for updates</li>
              <li>Inline editing pattern (click to edit)</li>
              <li>Simple inline template strings</li>
              <li>Form validation and error responses</li>
            </ul>
          </div>

          <div class="divider"></div>

          <p class="text-base-content/80">
            Try editing this text: <InlineEditor
              text="Click to edit this text"
            />
          </p>

          <div class="divider"></div>

          <div class="code-explanation space-y-3">
            <h4 class="text-xl font-semibold text-base-content">
              How This Works
            </h4>

            <Code
              title="1. Template Definition"
              lang="html"
              code={`<!-- External template for optimistic state -->
<template id="inline-editor-optimistic">
  <div class="editable-wrapper">
    <span class="display-text optimistic-pending" 
          onclick="showInput(this)">
      \\\${this.querySelector('input').value}
    </span>
    <input class="edit-input" 
           style="display: none" 
           type="text" 
           name="text" 
           value="\\\${this.querySelector('input').value}"
           onblur="hideInput(this)" />
  </div>
</template>`}
            />

            <Code
              title="2. Inline Editor Component"
              lang="astro"
              code={`<div 
  class="editable-wrapper"
  hx-patch="/api/edit" 
  hx-trigger="blur from:input, keyup[key=='Enter'] from:input"
  hx-target="this"
  hx-swap="outerHTML"
  data-optimistic={JSON.stringify({
    snapshotContent: true,
    template: "#inline-editor-optimistic",
    errorTemplate: '<div class="editable-wrapper"><span class="save-error">❌ Failed to save</span></div>',
    delay: 2000
  })}>
  
  <span class="display-text" onclick="showInput(this)">
    {text}
  </span>
  
  <input class="edit-input" style="display: none" type="text" name="text" 
         value={text} onblur="hideInput(this)" />
</div>`}
            />

            <Code
              title="3. API Validation Logic"
              lang="astro"
              code={`---
import InlineEditor from "../../components/InlineEditor.astro";

// Parse and validate form data
const formData = await Astro.request.formData();
const text = formData.get("text") as string;

if (!text || text.trim().length === 0) {
  return new Response("Text cannot be empty", { status: 422 });
}

if (text.length > 100) {
  return new Response("Text too long", { status: 422 });
}

// 20% chance of validation error for demo
if (Math.random() < 0.2) {
  return new Response("Validation Error", { status: 422 });
}
---

<!-- Return updated component -->
<InlineEditor text={text} />`}
            />

            <h5>Templates vs Values: When to Use Each</h5>
            <p>
              The inline editor demonstrates using <strong
                >external HTML templates</strong
              > instead of the <code class="text-accent">values</code> approach.
              Here's when to use each:
            </p>
            <ul>
              <li>
                <strong class="text-secondary">Use templates when:</strong> You need
                to show complex HTML structures, multiple elements, or when the optimistic
                state significantly differs from the original
              </li>
              <li>
                <strong class="text-secondary">Use values when:</strong> You're updating
                simple properties like text, classes, or attributes (see the LikeButton
                example)
              </li>
              <li>
                <strong class="text-secondary"
                  >Templates are cleaner for:</strong
                > Maintaining proper HTML structure, applying conditional styling,
                and keeping configuration readable
              </li>
            </ul>

            <h5>Key Features</h5>
            <ul>
              <li>
                <strong class="text-secondary">Multiple event triggers:</strong>
                Saves on both blur and Enter key press for better UX
              </li>
              <li>
                <strong class="text-secondary">PATCH HTTP method:</strong> Semantic
                HTTP verb for updates (vs POST for creation)
              </li>
              <li>
                <strong class="text-secondary">External HTML templates:</strong>
                Uses template elements for cleaner, more maintainable code
              </li>
              <li>
                <strong class="text-secondary">Interactive editing:</strong> Toggle
                between display and edit modes with JavaScript
              </li>
              <li>
                <strong class="text-secondary">Validation handling:</strong> Server
                returns 422 status for validation errors
              </li>
              <li>
                <strong class="text-secondary">Graceful degradation:</strong> Reverts
                to original text if save fails
              </li>
            </ul>

            <h5>Why This Pattern?</h5>
            <ul>
              <li>
                <strong class="text-secondary">Common UI pattern:</strong> Inline
                editing is widely used in admin interfaces and content management
              </li>
              <li>
                <strong class="text-secondary">Better UX:</strong> No page navigation
                required, saves immediately on focus loss
              </li>
              <li>
                <strong class="text-secondary">Semantic HTTP:</strong> PATCH is the
                correct method for partial updates
              </li>
              <li>
                <strong class="text-secondary">Progressive enhancement:</strong>
                Works without JavaScript, enhanced with optimistic updates
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body space-y-4">
          <h3 class="card-title text-2xl text-primary">
            Product Rating with Rich Data
          </h3>
          <p class="text-base-content/80">
            Rate a product and see rich optimistic updates that pull data from HTML attributes, 
            data attributes, and element content. 
            <strong class="text-secondary">25% chance of simulated errors</strong> 
            to demonstrate comprehensive error handling.
          </p>
          <div class="features">
            <strong class="text-secondary">Features demonstrated:</strong>
            <ul>
              <li>
                <strong class="text-secondary">{'${attr:title}'}</strong> -
                Product name from button title attribute
              </li>
              <li>
                <strong class="text-secondary">{'${data:product-id}'}</strong> -
                Product ID from data attribute
              </li>
              <li>
                <strong class="text-secondary">{'${this.textContent}'}</strong> -
                Rating value from clicked button text
              </li>
              <li>Realistic e-commerce rating interaction</li>
              <li>Multiple data sources in single optimistic update</li>
            </ul>
          </div>

          <div class="divider"></div>

          <ProductRating 
            productId="wireless-headphones-pro"
            productName="Wireless Headphones Pro"
            currentRating={4.2}
            reviewCount={847}
          />

          <div class="divider"></div>

          <div class="code-explanation space-y-3">
            <h4>Interpolation Features</h4>

            <Code
              title="1. Attribute Helper ${attr:name}"
              lang="javascript"
              code={`data-optimistic={JSON.stringify({
  values: {
    "title": "Validating username: \${attr:value}",
    "data-status": "validating"
  },
  errorMessage: "Username validation failed"
})}`}
            />

            <Code
              title="2. Data Attribute Shorthand ${data:name}"
              lang="javascript"
              code={`data-optimistic={JSON.stringify({
  values: {
    "title": "Updating \${data:user-name} to level \${this.value}"
  },
  errorTemplate: "Failed to update \${data:user-name} from level \${data:current-level}"
})}`}
            />

            <Code
              title="3. Element Text Content ${this.textContent}"
              lang="javascript"
              code={`data-optimistic={JSON.stringify({
  values: {
    "textContent": "Saving: \${this.textContent}",
    "className": "saving-state"
  },
  errorTemplate: 'Could not save "\${this.textContent}"'
})}`}
            />

            <h5>Benefits of New Helpers</h5>
            <ul>
              <li>
                <strong class="text-secondary">Cleaner syntax:</strong>
                <code class="text-accent">{'${data:user-id}'}</code> vs <code
                  >{'${this.dataset.userId}'}</code
                >
              </li>
              <li>
                <strong class="text-secondary">More readable:</strong>
                <code class="text-accent">{'${attr:title}'}</code> vs <code
                  >{'${this.getAttribute(\'title\')}'}</code
                >
              </li>
              <li>
                <strong class="text-secondary">Error prevention:</strong> Built-in
                fallbacks for missing attributes
              </li>
              <li>
                <strong class="text-secondary">Better UX:</strong> Show exactly what
                the user was trying to save/update
              </li>
            </ul>
          </div>
        </div>
      </div>

      <div class="card bg-base-100 shadow-lg border border-base-300">
        <div class="card-body">
          <WarningsDemo />
        </div>
      </div>
    </div>
  </body>
</html>

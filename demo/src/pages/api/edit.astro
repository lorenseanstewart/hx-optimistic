---
// Parse form data
const formData = await Astro.request.formData();
const text = formData.get("text") as string;

// Debug logging
console.log('Received form data:', Object.fromEntries(formData));
console.log('Text value:', text);
console.log('Text type:', typeof text);
console.log('Text length:', text?.length);

// Validate input
if (!text || text.trim().length === 0) {
  console.log('Validation failed: empty text');
  return new Response("Text cannot be empty", { status: 422 });
}

if (text.length > 100) {
  console.log('Validation failed: text too long');
  return new Response("Text too long", { status: 422 });
}

// Simulate some processing time
await new Promise((resolve) =>
  setTimeout(resolve, Math.random() * 800 + 400), // 0.4-1.2 seconds
);

// 5% chance of error for demonstration  
if (Math.random() < 0.05) {
  console.log('Random validation error');
  return new Response("Validation Error", { status: 422 });
}

console.log('Success! Returning text:', text);
// Return the complete wrapper HTML
const html = `
<span
  class="display-text"
  onclick="this.style.display='none'; 
             this.nextElementSibling.style.display='inline-block';
             this.nextElementSibling.focus();
             this.nextElementSibling.select();"
>
  ${text}
</span>
<input
  class="edit-input"
  style="display: none"
  type="text"
  name="text"
  value="${text}"
  hx-patch="/api/edit" 
  hx-trigger="blur, keyup[key=='Enter'] consume"
  hx-target="closest .editable-wrapper"
  onkeydown="if(event.key==='Enter') event.preventDefault();"
  data-optimistic='{"optimisticTemplate":"#inline-edit-optimistic","snapshotContent":true}'
/>
`;

return new Response(html, {
  headers: { 'Content-Type': 'text/html' }
});
---